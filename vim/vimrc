" General settings {{{
set nocompatible
syntax enable
filetype plugin on
set hidden
" change the mapleader from \ to , (This has to be set before <leader> is used.)
let mapleader=","
" Always show the signcolumn, otherwise it would shift the text each time
set signcolumn=yes
set number 
set rnu
" Use spaces instead of tabs
set expandtab 
set tabstop=2
set shiftwidth=2
set softtabstop=2
" Don't line wrap mid-word.
set lbr 
" Give more space for displaying messages.
set cmdheight=2
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Don't show the intro
set shortmess+=I
" more powerful backspacing
set backspace=indent,eol,start  
" disable audio bell
set belloff=all 
" show matching braces when text indicator is over them
set showmatch 
" Save 1,000 items in history
set history=1000 
" Show the line and column number of the cursor position
set ruler 
" Display the incomplete commands in the bottom right-hand side of your screen.  
set showcmd 
" Display completion matches on your status line
set wildmenu 
" Show a few lines of context around the cursor
set scrolloff=10 
" Copy the indentation from the current line.
set autoindent 
" Enable smart autoindenting.
set smartindent 
" Open vertical splits right of the current one.
set splitright
" Open horizontal splits below the current one.
set splitbelow

" Searching {{{
" Highlight search matches
set hlsearch 
" Enable incremental searching
set incsearch 
set wildignore+=*/node_modules/*
set wildignore+=*/public/*
set wildignore+=*/build/*
" set ignorecase " Ignore case when searching
" set smartcase " Override the 'ignorecase' option if the search pattern contains upper case characters.
" Search down into subfolders
" - Provides tab-completion for all file-related tasks
" - Hit tab to :find by partial match
" - Use * to make it fuzzy
" - TIP: :b lets you autocomplete any open buffer
set path=.,**
" }}}
"}}}

" Theme settings {{{
" Plugin theme settings {{{ 
let g:gruvbox_sign_column = 'bg0'
let g:gruvbox_italic=1
colorscheme gruvbox

let g:airline_powerline_fonts = 1 " use the powerline symbols within Airline.
" }}}

set termguicolors
set bg=dark
highlight Normal guibg=NONE ctermbg=NONE
" }}}

" Backups {{{
set backup
set backupdir=~/.vim/tmp/backup//
set swapfile
set directory=~/.vim/tmp/swap//
set undofile
set undodir=~/.vim/tmp/undo//
" }}}

" Mappings {{{
nnoremap <leader>ve :e ~/.vim/vimrc<CR>
nnoremap <leader>vv :source ~/.vim/vimrc<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader><esc> :noh<CR>

" place cursor at the end after yanking selection
vnoremap y ygv<esc>

" quicker window movement
nnoremap <down> <C-w>j
nnoremap <up> <C-w>k
nnoremap <left> <C-w>h
nnoremap <right> <C-w>l
nnoremap <space> <C-w>w

" navigating tabs
nnoremap <silent> ]t :tabprevious<CR>
nnoremap <silent> [t :tabnext<CR>

" easier grep searching in project
command! -nargs=+ Grep execute 'silent grep! -R -F <args>' | cw 20
nnoremap <leader>gr :Grep<space>

" Navigating quickfix list
nnoremap <silent> <C-J> :cnext<CR>
nnoremap <silent> <C-K> :cprevious<CR>
" }}}

" Native plugins {{{ 
packadd! matchit " enable the matchit plugin (e.g. to find the matching html tags)
" }}}

" 3rd party plugins {{{
" tcomment {{{
let g:tcomment#filetype#guess = 1
" }}}

" 'vim-closetag' {{{
let g:closetag_filetypes = 'html,xhtml,phtml,javascript,javascriptreact'
let g:closetag_close_shortcut = '<leader>>'
" }}}

" Bufkill {{{
" Bufkill creates unwanted leader mappings
let g:BufKillCreateMappings = 0
" }}}

" 'CoC' {{{
let g:coc_global_extensions = [
        \ 'coc-tsserver',
        \ 'coc-eslint',
        \ 'coc-prettier',
        \ 'coc-html',
        \ 'coc-css',
        \ 'coc-json',
        \ 'coc-git',
        \ 'coc-explorer',
        \ 'coc-markdownlint',
        \ 'coc-snippets',
        \ 'coc-pairs'
  \ ]

" Use tab and shift tab to jump through snippet
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" }}}
" }}}

" 3rd party plugin mappings {{{
" 'tcomment' Mappings {{{
map <silent> <leader>/ :TComment<CR>
" }}}

" 'FZF' Mappings {{{
nmap <silent> <leader>b :Buffers<CR>
nmap <silent> <leader><space> :GFiles<CR>
" }}}

" Bufkill Mappings {{{
nnoremap <silent> <leader>x :BD<CR>
" }}}

" 'CoC' Mappings {{{
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Select the first completion item on <CR> or <TAB>
inoremap <silent><expr> <CR> pumvisible() ? coc#_select_confirm() : "<CR>"

" Make <TAB> used for trigger completion, completion confirm, snippet expand and jump
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> <leader>e :CocCommand explorer<CR>

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [e <Plug>(coc-diagnostic-prev)
nmap <silent> ]e <Plug>(coc-diagnostic-next)

" navigate chunks of current buffer
nmap <silent> ]g <Plug>(coc-git-nextchunk)
nmap <silent> [g <Plug>(coc-git-prevchunk)
" show chunk diff at current position
nmap <silent> <leader>gh <Plug>(coc-git-chunkinfo)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
nnoremap <silent> gh :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Symbol renaming.
nmap <leader>r <Plug>(coc-rename)

" Formatting code.
nmap <leader>f  <Plug>(coc-format)
xmap <leader>f  <Plug>(coc-format-selected)

" Applying codeAction
" Example: `<leader>aap` for current paragraph
xmap <silent> <leader>a  <Plug>(coc-codeaction-selected)
nmap <silent> <leader>a  <Plug>(coc-codeaction-cursor)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent> <leader>cd  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <leader>ce  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <leader>c<space>  :<C-u>CocListResume<CR>
" }}}
" }}}

" vim:foldmethod=marker
