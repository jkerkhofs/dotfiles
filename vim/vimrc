" General settings {{{
set nocompatible
syntax enable
filetype plugin on
set hidden
" change the mapleader from \ to , (This has to be set before <leader> is used.)
let mapleader=","
" Always show the signcolumn, otherwise it would shift the text each time
set signcolumn=yes
set number 
set rnu
" Use spaces instead of tabs
set expandtab 
set tabstop=4
set shiftwidth=4
set softtabstop=4
" Don't line wrap mid-word.
set lbr 
" Give more space for displaying messages.
set cmdheight=2
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" more powerful backspacing
set backspace=indent,eol,start  
" disable audio bell
set belloff=all 
" show matching braces when text indicator is over them
set showmatch 
" Save 1,000 items in history
set history=1000 
" Show the line and column number of the cursor position
set ruler 
" Display the incomplete commands in the bottom right-hand side of your screen.  
set showcmd 
" Display completion matches on your status line
set wildmenu 
" Show a few lines of context around the cursor
set scrolloff=10 
" Copy the indentation from the current line.
set autoindent 
" Enable smart autoindenting.
set smartindent 

" Searching {{{
" Highlight search matches
set hlsearch 
" Enable incremental searching
set incsearch 
set wildignore+=*/node_modules/*
set wildignore+=*/public/*
set wildignore+=*/build/*
" set ignorecase " Ignore case when searching
" set smartcase " Override the 'ignorecase' option if the search pattern contains upper case characters.
" Search down into subfolders
" - Provides tab-completion for all file-related tasks
" - Hit tab to :find by partial match
" - Use * to make it fuzzy
" - TIP: :b lets you autocomplete any open buffer
set path=.,**
" }}}
"}}}

" Theme settings {{{
" Plugin theme settings {{{ 
let g:gruvbox_sign_column = 'bg0'
colorscheme gruvbox
let g:airline_powerline_fonts = 1 " use the powerline symbols within Airline.
" }}}

set termguicolors
set bg=dark
highlight Normal guibg=NONE ctermbg=NONE
" }}}

" Backups {{{
set backup
set backupdir=~/.vim/tmp/backup//
set swapfile
set directory=~/.vim/tmp/swap//
set undofile
set undodir=~/.vim/tmp/undo//
" }}}

" Native plugins {{{ 
packadd! matchit " enable the matchit plugin (e.g. to find the matching html tags)
" }}}

" 3rd party plugins {{{
" 'CoC' {{{
let g:coc_global_extensions = [
        \ 'coc-tsserver',
        \ 'coc-eslint',
        \ 'coc-prettier',
        \ 'coc-html',
        \ 'coc-css',
        \ 'coc-json',
        \ 'coc-git',
        \ 'coc-explorer',
        \ 'coc-markdownlint'
  \ ]

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" }}}
" }}}

" Mappings {{{
nnoremap <leader><esc> :noh<return><esc>
nnoremap <leader>ve :e ~/.vim/vimrc<CR>
nnoremap <leader>vv :source ~/.vim/vimrc<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>x :bd<CR>
vnoremap y ygv<esc>

" quicker window movement
nnoremap <down> <C-w>j
nnoremap <up> <C-w>k
nnoremap <left> <C-w>h
nnoremap <right> <C-w>l

" 'FZF' Mappings {{{
nmap <silent> <leader>b :Buffers<CR>
nmap <silent> <leader><space> :GFiles<CR>
" }}}

" 'CoC' Mappings {{{
" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nmap <leader>e :CocCommand explorer<CR>

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" navigate chunks of current buffer
nmap <silent> <leader>gc <Plug>(coc-git-nextchunk)
nmap <silent> <leader>gC <Plug>(coc-git-prevchunk)
" show chunk diff at current position
nmap <silent> <leader>gi <Plug>(coc-git-chunkinfo)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" }}}
" }}}

" vim:foldmethod=marker
