" General settings {{{

  set nocompatible
  syntax enable
  filetype plugin on
  set hidden
  " change the mapleader from \ to , (This has to be set before <leader> is used.)
  let mapleader=","
  " Always show the signcolumn, otherwise it would shift the text each time
  set signcolumn=yes
  set number
  set rnu
  " Use spaces instead of tabs
  set expandtab
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  " Don't line wrap mid-word.
  set lbr
  " Give more space for displaying messages.
  set cmdheight=2
  " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
  " delays and poor user experience.
  set updatetime=50
  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c
  " Don't show the intro
  set shortmess+=I
  " more powerful backspacing
  set backspace=indent,eol,start
  " disable audio bell
  set belloff=all
  " Save 1,000 items in history
  set history=1000
  " Show the line and column number of the cursor position
  set ruler
  " Display the incomplete commands in the bottom right-hand side of your screen.
  set showcmd
  " Display completion matches on your status line
  set wildmenu
  " Show a few lines of context around the cursor
  set scrolloff=10
  " Copy the indentation from the current line.
  set autoindent
  " Enable smart autoindenting.
  set smartindent
  " Open vertical splits right of the current one.
  set splitright
  " Open horizontal splits below the current one.
  set splitbelow
  " Enable mouse support
  set mouse=nv

  augroup General
    autocmd!
    " Disable relative numbers on insert mode.
    autocmd InsertEnter * if &number | set norelativenumber | endif
    autocmd InsertLeave * if &number | set relativenumber | endif
    " Clear jumplist to avoid jumping to another session/project.
    autocmd VimEnter * :clearjumps
  augroup END

  augroup filetype_scss
    autocmd!
    " Add '@', '-', '$', '#' characters to keyword list for scss.
    autocmd FileType scss setl iskeyword+=@-@,-,$,#
  augroup END

  augroup filetype_qf
    autocmd!
    " Close the quickfix window with esc.
    autocmd FileType qf nnoremap <buffer><silent> <esc> :q<cr>
  augroup END

  augroup filetype_markdown
    autocmd!
    " Exclude brackets for filename detection in markdown.
    autocmd FileType markdown setl isfname-=[,]
  augroup END

  silent function! IsWindows() abort
    return (has('win32') || has('win64'))
  endfunction

  " Use PowerShell when on Windows
  if IsWindows()
    let &shell = executable('pwsh') ? 'pwsh' : 'powershell'
    let &shellcmdflag = '-NoLogo -NoProfile -ExecutionPolicy RemoteSigned -Command [Console]::InputEncoding=[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;'
    let &shellredir = '-RedirectStandardOutput %s -NoNewWindow -Wait'
    let &shellpipe = '2>&1 | Out-File -Encoding UTF8 %s; exit $LastExitCode'
    set shellquote= shellxquote=
  endif

" }}}


" Searching {{{

  " Highlight search matches
  set hlsearch
  " Enable incremental searching
  set incsearch
  set wildignore+=*/node_modules/*
  set wildignore+=*/public/*
  set wildignore+=*/build/*
  " Ignore case when searching
  set ignorecase
  " Override the 'ignorecase' option if the search pattern contains upper case characters.
  set smartcase
  " Search down into subfolders
  " - Provides tab-completion for all file-related tasks
  " - Hit tab to :find by partial match
  " - Use * to make it fuzzy
  " - TIP: :b lets you autocomplete any open buffer
  set path=.,**

" }}}


" Theme settings {{{

  set termguicolors
  set bg=dark
  highlight Normal guibg=NONE ctermbg=NONE

" }}}


" Backups {{{

  set backup
  set backupdir=~/.vim/tmp/backup//
  set swapfile
  set directory=~/.vim/tmp/swap//
  " set undofile
  " set undodir=~/.vim/tmp/undo//

" }}}


" Mappings {{{

  nnoremap <leader>ve :e ~/.vim/vimrc<CR>
  nnoremap <leader>vv :source ~/.vim/vimrc<bar>noh<CR>
  nnoremap <silent> <leader>w :echon''<bar>update<CR>
  nnoremap <leader>W :e ++ff=dos<CR>:setlocal ff=unix<CR>:w<CR>

  " Esc in normal mode clears hlsearch and command line message.
  nnoremap <silent> <esc> :noh<bar>echon''<CR>

  " Open default file explorer
  nmap <silent> <leader>e :Lexplore<CR>

  " place cursor at the end after yanking selection
  vnoremap y ygv<esc>

  " Y to yank to system clipboard.
  nnoremap Y "+y
  vnoremap Y "+y

  " Note: C-hjkl are mapped to left/down/up/right at OS level.
  " faster window movement.
  nnoremap <left> <C-w>h
  nnoremap <down> <C-w>j
  nnoremap <up> <C-w>k
  nnoremap <right> <C-w>l
  nnoremap <space> <C-w>w

  " navigating tabs
  nnoremap <silent> ]t :tabnext<CR>
  nnoremap <silent> [t :tabprevious<CR>
  nnoremap <leader>1 1gt
  nnoremap <leader>2 2gt
  nnoremap <leader>3 3gt
  nnoremap <leader>4 4gt
  nnoremap <leader>5 5gt
  nnoremap <leader>6 6gt
  nnoremap <leader>7 7gt
  nnoremap <leader>8 8gt
  nnoremap <leader>9 9gt
  nnoremap <silent> <leader>0 :tablast<CR>

  " Navigating quickfix list
  nnoremap <silent> <S-Down> :cnext<CR>
  nnoremap <silent> <S-Up> :cprevious<CR>

  if IsWindows()
    " Disable suspend on Windows as it just freezes vim and leaves you in a blocked state.
    nmap <C-z> <Nop>
  endif

" }}}


" Line/selection movement mappings {{{

  function! MoveLineUp()
    call MoveLineOrVisualUp(".", "")
    normal ==
  endfunction

  function! MoveLineDown()
    call MoveLineOrVisualDown(".", "")
    normal ==
  endfunction

  function! MoveVisualUp()
    call MoveLineOrVisualUp("'<", "'<,'>")
    normal gv=gv
  endfunction

  function! MoveVisualDown()
    call MoveLineOrVisualDown("'>", "'<,'>")
    normal gv=gv
  endfunction

  function! MoveLineOrVisualUp(line_getter, range)
    let l_num = line(a:line_getter)
    if l_num - v:count1 - 1 < 0
      let move_arg = "0"
    else
      let move_arg = a:line_getter." -".(v:count1 + 1)
    endif
    call MoveLineOrVisualUpOrDown(a:range."move ".move_arg)
  endfunction

  function! MoveLineOrVisualDown(line_getter, range)
    let l_num = line(a:line_getter)
    if l_num + v:count1 > line("$")
      let move_arg = "$"
    else
      let move_arg = a:line_getter." +".v:count1
    endif
    call MoveLineOrVisualUpOrDown(a:range."move ".move_arg)
  endfunction

  function! MoveLineOrVisualUpOrDown(move_arg)
    let col_num = virtcol(".")
    execute "silent! ".a:move_arg
    execute "normal! ".col_num."|"
  endfunction

  nnoremap <silent> <A-j> :<C-u>call MoveLineDown()<CR>
  nnoremap <silent> <A-k> :<C-u>call MoveLineUp()<CR>
  inoremap <silent> <A-j> <C-o>:call MoveLineDown()<CR>
  inoremap <silent> <A-k> <C-o>:call MoveLineUp()<CR>
  vnoremap <silent> <A-j> :<C-u>call MoveVisualDown()<CR>
  vnoremap <silent> <A-k> :<C-u>call MoveVisualUp()<CR>

" }}}


" Commands {{{

  " Close (wipeout) all hidden buffers
  function CloseHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
      silent execute 'bwipeout' buf
    endfor
  endfunction
  command! CloseHiddenBuffers call CloseHiddenBuffers()

" }}}


" Native plugins {{{ 

  packadd! matchit " enable the matchit plugin (e.g. to find the matching html tags)

" }}}


" vim:foldmethod=marker
