" General settings {{{
set nocompatible
syntax enable
filetype plugin on
set hidden
" change the mapleader from \ to , (This has to be set before <leader> is used.)
let mapleader=","
" Always show the signcolumn, otherwise it would shift the text each time
set signcolumn=yes
set number 
set rnu
" Use spaces instead of tabs
set expandtab 
set tabstop=2
set shiftwidth=2
set softtabstop=2
" Don't line wrap mid-word.
set lbr 
" Give more space for displaying messages.
set cmdheight=2
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Don't show the intro
set shortmess+=I
" more powerful backspacing
set backspace=indent,eol,start  
" disable audio bell
set belloff=all 
" show matching braces when text indicator is over them
set showmatch 
" Save 1,000 items in history
set history=1000 
" Show the line and column number of the cursor position
set ruler 
" Display the incomplete commands in the bottom right-hand side of your screen.  
set showcmd 
" Display completion matches on your status line
set wildmenu 
" Show a few lines of context around the cursor
set scrolloff=10 
" Copy the indentation from the current line.
set autoindent 
" Enable smart autoindenting.
set smartindent 
" Open vertical splits right of the current one.
set splitright
" Open horizontal splits below the current one.
set splitbelow
" Enable mouse support
set mouse=nv
"}}}

" Searching {{{
" Highlight search matches
set hlsearch 
" Enable incremental searching
set incsearch 
set wildignore+=*/node_modules/*
set wildignore+=*/public/*
set wildignore+=*/build/*
" Ignore case when searching
set ignorecase
" Override the 'ignorecase' option if the search pattern contains upper case characters.
set smartcase
" Search down into subfolders
" - Provides tab-completion for all file-related tasks
" - Hit tab to :find by partial match
" - Use * to make it fuzzy
" - TIP: :b lets you autocomplete any open buffer
set path=.,**
" }}}

" Theme settings {{{
set termguicolors
set bg=dark
highlight Normal guibg=NONE ctermbg=NONE
" }}}

" Backups {{{
set backup
set backupdir=~/.vim/tmp/backup//
set swapfile
set directory=~/.vim/tmp/swap//
" set undofile
" set undodir=~/.vim/tmp/undo//
" }}}

" Mappings {{{
nnoremap <leader>ve :e ~/.vim/.vimrc<CR>
nnoremap <leader>vv :source ~/.vim/vimrc<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader><esc> :noh<CR>

" Open file explorer
map <silent> <leader>e :Lexplore<CR>

" place cursor at the end after yanking selection
vnoremap y ygv<esc>

" quicker window movement. 
" Note: C-hjkl are mapped to left/down/up/right at OS level.
nnoremap <left> <C-w>h
nnoremap <down> <C-w>j
nnoremap <up> <C-w>k
nnoremap <right> <C-w>l
nnoremap <space> <C-w>w

" navigating tabs
nnoremap <silent> ]t :tabprevious<CR>
nnoremap <silent> [t :tabnext<CR>

" easier grep searching in project
command! -nargs=+ Grep execute 'silent grep! -R -F <args>' | cw 20
nnoremap <leader>gr :Grep<space>

" Navigating quickfix list
nnoremap <silent> <C-J> :cnext<CR>
nnoremap <silent> <C-K> :cprevious<CR>
" }}}

" Native plugins {{{ 
packadd! matchit " enable the matchit plugin (e.g. to find the matching html tags)
" }}}

" {{{ Plugins
" auto-install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
 silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
   \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  "autocmd VimEnter * PlugInstall
  "autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

if has("nvim")
  let g:plug_home = stdpath('data') . '/plugged'
endif

call plug#begin()

" Theme
Plug 'sainnhe/gruvbox-material'

" Git
Plug 'tpope/vim-fugitive'

" Line/block movements with A-hjkl
Plug 'matze/vim-move'

if has("nvim")
  " Treesitter
  Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
  Plug 'nvim-treesitter/playground'
  Plug 'JoosepAlviste/nvim-ts-context-commentstring'

  " Commenting
  Plug 'tpope/vim-commentary'

  " LSP
  Plug 'neovim/nvim-lspconfig'
  Plug 'kabouzeid/nvim-lspinstall'
  Plug 'hrsh7th/nvim-compe'

  " Telescope
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'
endif

call plug#end()
" }}}

" vim:foldmethod=marker
